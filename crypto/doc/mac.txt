MAC - message authentication code
HMAC - hash-based message authentication code

#
# MAC
#

os algoritmos MAC são conhecidos como "função hash com chave, porque se
comportam como uma função hash com uma chave. Qualquer alteração na mensagem,
resulta em um valor do MAC diferente.

auth_code = MAC(key, msg)

# Exemplo, HMAC-256
HMAC-SHA256('chave', 'texto') = 32885b49c8a1009e6d66662f8462e7dd5df769a7b725d1d546574e6d5d6e76ad

O codigo MAC é utilizado como autenticador digital, como por exemplo, assinatura digital. Para que
o MAC seja utilizado, eh necessário que ambas as partes troquem uma chave de forma segura.

# exemplos de algoritmos MAC
HMAC-SHA256, Keccak-based MAC

# CENARIO DE UTILIZACAO DO MAC

1 - duas partes trocam uma certa chaves de criptgorafia, MAC key.

2 - o emissor gera o MAC utilizando a mensagem e a chave secreta.
    MAC1 = MAC Algorithm(secret key, message)

3 - o emissor envia a mensagem e o MAC para o receptor.

4 - em posse da mensagem e do MAC1, o receptor gera novamente o MAC2 da mensagem.
    Visto que ele possui a mensagem e a chave secreta trocada entre ambos.
    Se por acaso o MAC1 for igual ao MAC2, isso indica que a mensagem não foi
    alterada durante a troca.

# AUTENTICANDO UMA MENSAGEM CRIPTOGRAFADA/DESCRIPTOGRAFADA UTILIZANDO MAC

1 - primeiro, derivar uma chave baseado na senha;
2 - criptografar a mensagem utilizando a derivada da chave;
3 - finalmente, calcular o MAC utilizando a derivada da chave e amensagem 
    original

5 - primeiro, descriptografar a mensagem utilizando a derivada derivada baseada
    na senha;
6 - proximo, descriptografar a mensagem com a chave derivada. DEsta forma, teremos
    a menagem original;
7 - finalemnte, nós calculamos o MAC utilizando a chave derivada e a mensagem descriptografada.

#
# MAC-Based Pseudo-Random Generator
#

Outra aplicação do MAC é a geração de número pseudo-aleatório. Para isso, será utilizado
os valores salt e seed.

next_seed = MAC(salt, seed)

#
# HMAC
#

​HMAC = Hash-based Message Authentication Code

HMAC é utilizado para garantir a autenticidade e integridade da mensagem.

hash = HMAC(key, msg, hash_func)
Como é utilizado uma chave secreta, o hash resultante possui as propriedades de
irrervisibilidade e resistente a colisão.

exemplos de hash_func = SHA-256, SHA-512, RIPEMD-160, SHA3-256 ou BLAKE2s

# Key Derivation Functions (KDF)

KDF = HMAC(salt, msg, SHA256)